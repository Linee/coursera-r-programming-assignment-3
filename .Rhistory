# ties: If there is a tie for the best hospital for a given outcome (meaning there is
# more than one hospital with that rate),
# then the hospital names should be sorted in alphabetical order and the first hospital
# in that set should be chosen (i.e. if hospitals “b”, “c”, and “f” are tied for best,
# then hospital “b” should be returned).
#if (length(hospital) > 1) {
#     hospitals_ties <- sort(hospital)
#     hospitals_ties[1]
# }
# else {
#     hospital
#  }
}
best("TX", "heart failure")
best("MD", "heart attack")
a <-  best("TX", "heart failure")
a
print best("TX", "heart failure")print()
print best("TX", "heart failure")
print(best("TX", "heart failure"))
best <- function(state, outcome) {
#state <- "TX"
#outcome <- "heart attack"
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "column_index"
#column_index <-
#    df[,c(HOSPITAL_NAME,STATE,column_index)]
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
#Hint: if you setup a named vector with something like
# outcomes <- c(“heart attack”=11, “heart failure”=17, “pneumonia”=23)
# then you can use that to both test the function argument and select the column.
# Something like df[, c(2,7,outcomes[outcome])]. Also, when you validate the outcome
# argument instead of using %in% outcomes you’d use %in% names(outcomes).
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome")
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
# filter for state
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_filtered$outcome)
# select the row with lowerst outcome
min_row <-which.min(state_filtered$outcome)
# select the hospital with lowest outcome row
hospital <- state_filtered[min_row,1]
return(hospital)
# ties: If there is a tie for the best hospital for a given outcome (meaning there is
# more than one hospital with that rate),
# then the hospital names should be sorted in alphabetical order and the first hospital
# in that set should be chosen (i.e. if hospitals “b”, “c”, and “f” are tied for best,
# then hospital “b” should be returned).
#if (length(hospital) > 1) {
#     hospitals_ties <- sort(hospital)
#     hospitals_ties[1]
# }
# else {
#     hospital
#  }
}
best("TX", "heart failure")
setwd("~/code/coursera-r-programming-assignment-3")
#load data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome [,11])
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "column_index"
#column_index <-
#    df[,c(HOSPITAL_NAME,STATE,column_index)]
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
#Hint: if you setup a named vector with something like
# outcomes <- c(“heart attack”=11, “heart failure”=17, “pneumonia”=23)
# then you can use that to both test the function argument and select the column.
# Something like df[, c(2,7,outcomes[outcome])]. Also, when you validate the outcome
# argument instead of using %in% outcomes you’d use %in% names(outcomes).
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome")
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
# filter for state
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_filtered$outcome)
# select the row with lowerst outcome
min_row <-which.min(state_filtered$outcome)
# select the hospital with lowest outcome row
hospital <- state_filtered[min_row,1]
return(hospital)
# ties: If there is a tie for the best hospital for a given outcome (meaning there is
# more than one hospital with that rate),
# then the hospital names should be sorted in alphabetical order and the first hospital
# in that set should be chosen (i.e. if hospitals “b”, “c”, and “f” are tied for best,
# then hospital “b” should be returned).
#if (length(hospital) > 1) {
#     hospitals_ties <- sort(hospital)
#     hospitals_ties[1]
# }
# else {
#     hospital
#  }
}
best("TX", "heart failure")
best("MD", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "column_index"
#column_index <-
#    df[,c(HOSPITAL_NAME,STATE,column_index)]
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
#Hint: if you setup a named vector with something like
# outcomes <- c(“heart attack”=11, “heart failure”=17, “pneumonia”=23)
# then you can use that to both test the function argument and select the column.
# Something like df[, c(2,7,outcomes[outcome])]. Also, when you validate the outcome
# argument instead of using %in% outcomes you’d use %in% names(outcomes).
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome")
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
# filter for state
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_filtered$outcome)
# select the row with lowerst outcome
min_row <-which.min(state_filtered$outcome)
# select the hospital with lowest outcome row
hospital <- state_filtered[min_row,1]
return(hospital)
# ties: If there is a tie for the best hospital for a given outcome (meaning there is
# more than one hospital with that rate),
# then the hospital names should be sorted in alphabetical order and the first hospital
# in that set should be chosen (i.e. if hospitals “b”, “c”, and “f” are tied for best,
# then hospital “b” should be returned).
if (length(hospital) > 1) {
hospitals_ties <- sort(hospital)
hospitals_ties[1]
}
else {
hospital
}
}
best("TX", "heart failure")
best("MD", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
?rank
rank_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
state <- "MD"
outcome <- "heart failure"
num <- 5
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "outcome_column"
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
names(data_new) <- c("hospital", "state_code", "outcome")
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
state_filtered <- subset(data_new, state_code == state)
View(state_filtered)
# make variable numeric
state_filtered$outcome <-as.numeric(state_filtered$outcome)
rank_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
View(state_filtered)
rank_column <- rank(data_new$outcome, na.last=TRUE,
ties.method="first")
View(data_new)
data_new$rank_column <- rank(data_new$outcome, na.last=TRUE,
ties.method="first")
View(data_new)
rankhospital <- function(state, outcome, num = "best") {
# state <- "MD"
# outcome <- "heart failure"
# num <- 5
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "outcome_column"
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
# in this function, we have four variables: hospital, state_code, outcome and num
# we need to create the rank variable called num
# but first, filter for state
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_rank$outcome)
number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
rank_column <- number_column[[num]]
data_new <- data_new[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column, rank_column)]
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome", "num")
# select the row with the outcome defined by "num"
row_select <- data_new$num
# select the hospital with the row defined by num
hospital <- data_new[row_select,1]
return(hospital)
}
rankhospital <- function(state, outcome, num = "best") {
# state <- "MD"
# outcome <- "heart failure"
# num <- 5
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "outcome_column"
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
# in this function, we have four variables: hospital, state_code, outcome and num
# we need to create the rank variable called num
# but first, filter for state
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_rank$outcome)
number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
rank_column <- number_column[[num]]
data_new <- data_new[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column, rank_column)]
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome", "num")
# select the row with the outcome defined by "num"
row_select <- data_new$num
# select the hospital with the row defined by num
hospital <- data_new[row_select,1]
return(hospital)
# we create a column index called "number"
# The num argument can take values “best”, “worst”, or an integer indicating the ranking
# (smaller numbers are better).
## Check that state and outcome are valid
## Return hospital name in that state with the given rank 30-day death rate
}
rankhospital("MD", "heart failure", 5)
rankhospital <- function(state, outcome, num = "best") {
# state <- "MD"
# outcome <- "heart failure"
# num <- 5
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "outcome_column"
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome")
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
# in this function, we have four variables: hospital, state_code, outcome and num
# we need to create the rank variable called num
# but first, filter for state
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_rank$outcome)
number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
rank_column <- number_column[[num]]
data_new <- data_new[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column, rank_column)]
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome", "num")
# select the row with the outcome defined by "num"
row_select <- data_new$num
# select the hospital with the row defined by num
hospital <- data_new[row_select,1]
return(hospital)
# we create a column index called "number"
# The num argument can take values “best”, “worst”, or an integer indicating the ranking
# (smaller numbers are better).
## Check that state and outcome are valid
## Return hospital name in that state with the given rank 30-day death rate
}
rankhospital("MD", "heart failure", 5)
rankhospital <- function(state, outcome, num = "best") {
# state <- "MD"
# outcome <- "heart failure"
# num <- 5
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "outcome_column"
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome")
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
# in this function, we have four variables: hospital, state_code, outcome and num
# we need to create the rank variable called num
# but first, filter for state
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_rank$outcome)
number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
rank_column <- number_column[[num]]
data_new <- state_filtered[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column, rank_column)]
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome", "num")
# select the row with the outcome defined by "num"
row_select <- data_new$num
# select the hospital with the row defined by num
hospital <- data_new[row_select,1]
return(hospital)
# we create a column index called "number"
# The num argument can take values “best”, “worst”, or an integer indicating the ranking
# (smaller numbers are better).
## Check that state and outcome are valid
## Return hospital name in that state with the given rank 30-day death rate
}
rankhospital("MD", "heart failure", 5)
rankhospital("MD", "heart failure", 5)
state <- "MD"
outcome <- "heart failure"
num <- 5
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available",
stringsAsFactors=FALSE)
## minimise data frame to columns needed
HOSPITAL_NAME_COL <- 2
STATE_COL <- 7
HEART_ATTACK_COL <- 11
HEART_FAILURE_COL <- 17
PNEUMONIA_COL <- 23
# the columns 11-23 are "outcome" and we create an outcome index called "outcome_column"
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_column <- outcome_columns[[outcome]]
data_new <- data[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
# give variables new names
names(data_new) <- c("hospital", "state_code", "outcome")
View(data_new)
## Check that state and outcome are valid
states <- data[,STATE_COL]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop(print("invalid state"))
}
if (!(outcome %in% outcomes)) {
stop(print("invalid outcome"))
}
state_filtered <- subset(data_new, state_code == state)
# make variable numeric
state_filtered$outcome <-as.numeric(state_rank$outcome)
state_filtered$outcome <-as.numeric(state_filtered$outcome)
number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
rank_column <- number_column[[num]]
data_new <- state_filtered[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column, rank_column)]
data_new <- state_filtered[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column)]
View(state_filtered)
state_filtered$outcome <-as.numeric(state_filtered$outcome)
state_filtered$number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
View(state_filtered)
state_filtered$rank_column <- number_column[[num]]
View(state_filtered)
data_new <- state_filtered[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column, rank_column)]
outcome_columns <- c("heart attack"=HEART_ATTACK_COL, "heart failure"=HEART_FAILURE_COL, "pneumonia"=PNEUMONIA_COL)
outcome_columns
state_filtered$number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
View(state_filtered)
state_filtered$number_column <- rank(state_filtered$outcome, na.last=TRUE,
ties.method="first")
state_filtered$rank_column <- number_column[[num]]
data_new <- state_filtered[c(HOSPITAL_NAME_COL, STATE_COL, outcome_column, rank_column)]
View(data_new)
View(state_filtered)
View(state_filtered)
sorted_state_filtered <- state_filtered[order(outcome)]
View(sorted_state_filtered)
sorted_state_filtered <- state_filtered[order(outcome),]
View(sorted_state_filtered)
View(sorted_state_filtered)
state_filtered
View(state_filtered)
View(state_filtered)
?order
outcome
sorted_state_filtered <- state_filtered[order(state_filted$outcome),]
sorted_state_filtered <- state_filtered[order(state_filtered$outcome),]
View(sorted_state_filtered)
View(sorted_state_filtered)
View(sorted_state_filtered)
View(sorted_state_filtered)
sorted_state_filtered <- state_filtered[order(state_filted$rank_column),]
sorted_state_filtered <- state_filtered[order(state_filtered$rank_column),]
View(sorted_state_filtered)
View(sorted_state_filtered)
